<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>비동기 폼 전송</title>
    <script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
    <!-- 아래는 axios 코드 -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <style>
      form {
        width: 80%;
        height: 50%;
        display: flex;
        flex-direction: column;
      }

      form button {
        margin-top: 1em;
      }
    </style>
  </head>
  <body>
    <form name="register">
      <input type="text" name="id" placeholder="ID" value="seyun" />
      <input type="password" name="pw" placeholder="password" value="1234" />
      <input type="text" name="name" placeholder="이름" pattern="[ㄱ-힣0-9]{3,}" value="김새싹" required />
      <button type="button" onclick="ajaxGet()">ajax get 전송</button>
      <button type="button" onclick="ajaxPost()">ajax post 전송</button>
      <button type="button" onclick="axiosGet()">axios get 전송</button>
      <button type="button" onclick="axiosPost()">axios post 전송</button>
      <button type="button" onclick="fetchGet()">fetch get 전송</button>
      <button type="button" onclick="fetchPost()">fetch post 전송</button>

      <!-- 아래 두 줄은 일반(동기) 폼 전송할 때 -->
      <!-- <input type="submit" /> -->
      <!-- <button type="submit">제출</button> -->
    </form>
    <h3 id="result"></h3>

    <script>
      function getData() {
        const forms = document.forms["register"];

        if (!forms.checkValidity()) { // checkValidity 폼의 유효성 검사를 해서 boolean 값 반환
          forms.reportValidity(); // reportValidity: 유효성 검사를 통과하지 못 한 input에 대해 알림을 띄워준다.
          return;
        }

        // getData 함수의 반환 값은 총 2가지 형태
        // false | object

        const data = {
          id: forms.id.value,
          pw: forms.pw.value,
          name: forms.name.value
        }

        return data;
      }

      // axios는 xml, json 등 다양한 포맷의 응답을 자동으로 처리한다
      function ajaxGet() {
        const data = getData()
        if (!data) return;

        $.ajax({
          type: "GET", // 폼 속성 중 method
          url: "/ajax", // 폼 속성 중 action
          data: data,
          // url: `/ajax?id=${data.id}&pw=${data.pw}&name=${data.name}`,
          success: function(result) { // 응답을 성공적으로 받았을 경우
            // 매개변수(result)에 응답이 들어옴
            console.log(result);
            $("#result").html(`ajax get 요청 성공 ${result.name}님 환영합니다.`)
          }
        })
      }

      function ajaxPost() {
        const data = getData()
        if (!data) return;

        $.ajax({
          type: "POST",
          url: "/ajax",
          data: data,
          success: function(result) {
            console.log(result);
            $("#result").html(`ajax post 요청 성공 ${result.name}님 환영합니다.`)
          }
        })
      }

      function axiosGet() {
        const data = getData();
        if (!data) return;

        //axios 함수는 promise 객체를 return
        axios({
          method: "GET",
          url: "/axios",
          params: data // get 요청으로 데이터 보낼 때 params 사용
          // params 대신 url에 query를 직접 작성해도 됨
        }).then((res) => {
          // 서버에서 보내준 응답이 res에 담김
          console.log(res)
          console.log(res.data)
          const {
            name
          } = res.data;
          $("#result").html(`axios get 요청 성공 ${name}님 환영합니다.`)
        })
      }

      async function axiosPost() {
        // 동적 폼 전송
        // 폼 유효성 검사도 하고 싶음.
        // 폼 유효성 검사를 input 태그의 pattern, minlength, required 등의 속성을 이용하고 싶음.

        // input 태그의 pattern, minlength, required 속성은 form의 "submit"과 연결돼있음
        // 동적 폼 전송은 form의 "submit"을 이용하는 게 아님
        // 따라서, js 코드 내에서 폼 유효성 검사를 하는 코드를 따로 작성해야함
        // 방법 1)
        // const regex = /^[a-z0-9]{5,}$/
        // regex.test(form.id.value)
        // 방법 2)
        // form.checkValidity(), form.reportValidity()라는 유효성 검사를 도와주는 메소드들이 있다

        const data = getData();
        if (!data) return;

        // promise를 사용하는 방법
        const res = await axios({
          method: "POST",
          url: "/axios",
          data: data // post일 경우 서버에 데이터를 보낼 때, data 키에 담아 보낸다
        })
        console.log(res, "res")
        console.log(res.data, "res.data,")
        $("#result").html(`axios post 요청 성공 ${res.data.name}님 ${res.data.msg}`)

        // 그냥 axios
        // axios({
        //   method: "POST",
        //   url: "/axios",
        //   data: data
        // }).then((res) => {
        //   const {
        //     name
        //   } = res.data
        //   console.log(res.data)
        //   $("#result").html(`axios post 요청 성공 ${name}님 환영합니다.`)
        // })
      }

      async function fetchGet() {
        const data = getData();
        if (!data) return;

        // fetch(url, option 객체)
        // url -> action
        // option 객체에 method가 있음
        // fetch는 method가 기본값 get
        // fetch는 get 요청 시 데이터를 query로 만들어서 url과 함께 전송해야한다
        // const urlQuery = `id=${data.id}&name=${data.name}&pw=${data.pw}`
        const urlQuery = new URLSearchParams(data).toString();

        // == 방법 1 (then 체이닝)
        // fetch(`/fetch?${urlQuery}`, {
        //   method: "GET"
        // }).then((res) => {
        //   // console.log('fetch res', res);
        //   // console.log('fetch text', res.text());
        //   console.log('fetch json', res.json());
        //   // return res.json
        //   // 응답을 파싱해야함
        //   // .json(), .text(), etc...
        // }).then((res) => {
        //   console.log("파싱", res)
        //   $("#result").html(`fetch get 요청 성공 ${res.name}님 ${res.msg}`)
        // })

        // == 방법 2 (async, await 반만)
        fetch(`/fetch?${urlQuery}`, {
          method: "GET"
        }).then(async (res) => {
          res = await res.json();
          console.log('res', res);
          $("#result").html(`fetch get 요청 성공 ${res.name}님`)
        })

        // == 방법 3 (async, await)
        // const oriRes = await fetch(`/fetch?${urlQuery}`)
        // const res = await oriRes.json()
        // console.log('res', res)
        // $("#result").html(`fetch get 요청 성공 ${res.name}님 ${res.msg}`)
      };

      function fetchPost() {
        const data = getData()
        if (!data) return;

        // 위에서는 전송할 때 content-type 기본값 사용: application/x-www-form-urlencoded
        // 하지만, fetch에서 POST 요청 시에는 작동을 안 함
        // content-type을 application/json 형태로 변경
        fetch("/fetch", {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          // stringify
          body: JSON.stringify(data)
        }).then((res) => {
          return res.json()
        }).then((res) => {
          console.log('res', res)
          $("#result").html(`fetch post 요청 성공 ${res.name}님 ${res.msg}`)
        })
      };
    </script>
  </body>
</html>